#!/usr/bin/env ruby

require 'optparse'
require 'fileutils'
require 'berktacular'

env_file    = nil
check       = false
upgrade     = false
gtoken_path = File.join(ENV['HOME'], '.github-token')
github_token= nil
printit     = false
berksfile   = nil
new_envfile = nil
preserve    = false
verify      = nil
upload      = false
berks_conf  = nil
knife_conf  = nil
workdir     = nil 

options =  OptionParser.new do |opts|
  opts.banner = "Read environment json file and spit out a berksfile"
  opts.on("-e ENV.json", "--environment ENV.json", String, "Path to the environment file to use.  Required.") do |f|
    env_file = f
  end
  opts.on("-c", "--check", "Check for updates and print what they would be") do |c|
    check = true
  end
  opts.on("-u", "--upgrade", "Auto-upgrade cookbooks that support it") do |u|
    upgrade = true
  end
  opts.on("-p", "--print", "Print the berksfile to stdout") do |p|
    printit = true
  end
  opts.on("-b PATH", "--berksfile PATH", String, "Write the berksfile to PATH.") do |b|
    berksfile = b
  end
  opts.on("-n PATH", "--new-envfile PATH", String,  "Write a new (updated) env file to PATH.") do |n|
    new_envfile = n
  end
  opts.on("--[no-]verify", "Install cookbooks to WORKDIR and confirm that all dependancies are met") do |v|
    verify = v
  end
  opts.on("--upload", "Upload the cookbooks and updated env file to the chef-server") do
    upload = true
  end
  opts.on("--berksconfig BERKS_CONF", "The berkshelf config file to use.  Defaults to ~/.chef/<env_name>-berkshelf.json") do |k|
    berks_conf = k
  end
  opts.on("--knifeconfig KNIFE_CONF", "The knife config file to use.  Defaults to ~/.chef/<env_name>-knife.rb") do |k|
    knife_conf = k
  end
  opts.on("--github-token-file FILE", String, "Path to the github token to use") do |g|
    gtoken_path = g
  end
  opts.on("-g TOKEN", "--github-token TOKEN", String, "The github token to use, not the path.  This will show up in ps output") do |t|
    github_token = t
  end
  opts.on("-w PATH","--workdir PATH", String, "The working directory to use, it will be created if need be.",
                                              "The working directory is used to test the cookbook install.",
                                              "Using this option prevents berktacular from deleting the workdir when done.",
                                              "Using a tmpfs filesystem is recommended (used by default)",
                                              "Default is a tmpdir somewhere (probably /tmp or /dev/shm)") do |w|
    workdir = w
    preserve = true
  end
  opts.on_tail("-h", "--help", "Print this help message" ) do
    puts opts
    exit 0
  end
  begin
    opts.parse!
  rescue OptionParser::ParseError, OptionParser::MissingArgument
    warn opts
    exit 1
  end
end
# Enable verify by default if uploading, unless the user has surpressed it.
verify ||= upload

require 'json'
require 'solve'

unless env_file && File.exist?(env_file)
  warn "No env file found at: '#{env_file}'"
  warn options
  exit 2
end

my_env = JSON.parse( File.read( env_file ) )

unless github_token
  if File.exists? gtoken_path
    github_token = IO.read(gtoken_path).strip
  elsif upgrade || check
    warn "No github token, cannot continue"
    warn options
    exit 3
  end
end

if upload
  berks_conf ||= "#{File.join(ENV['HOME'], File.basename(env_file, ".json") + "-berkshelf.json" )}"
  unless File.exists? berks_conf
    warn "The berkshelf config file could not be found at '#{berks_conf}'"
    warn options
    exit 4
  end
  knife_conf ||= "#{File.join(ENV['HOME'], File.basename(env_file, ".json") + "-knife.rb" )}"
  unless File.exists? knife_conf
    warn "The knife config file could not be found at '#{knife_conf}'"
    warn options
    exit 5
  end
end

# Create a new berksfile
puts "Checking updates, this can take some time..." if check || upgrade
b = Berktacular::Berksfile.new(my_env, upgrade: upgrade, github_token: github_token)
b.check_updates           if check
puts "#{b}"               if printit
if berksfile
  FileUtils.mkdir_p( File.dirname(berksfile) )
  File.write(berksfile, b)
end
if new_envfile
  FileUtils.mkdir_p( File.dirname(new_envfile))
  File.write(new_envfile, JSON.pretty_generate(b.env_file))
end

if verify
  unless b.verify(workdir)
    puts "Berksfile verification failed"
    b.missing_deps.each do |name, msg|
      puts "#{name}\n\t#{msg}"
    end
    exit 10
  end
  puts "Berksfile Verified"
end

if upload
  unless b.upload(knife_conf, workdir)
    puts "Upload failed!"
    exit 11
  end
  puts "Cookbooks and new environment file have been uploaded to the server"
end

b.clean unless preserve
